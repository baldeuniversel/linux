#!/usr/bin/zsh

:   ' 
    /**
    * @overview This program allows to an user to execute some actions(see the precondition) 
    * that can be very useful (First of all, this program is written for the <<Ve-Quantic>> members).
    *
    *
    *
    * @requires The only options supported are [ --copy, --cut, --paste-copy, --paste-cut, --array,
    *                                            --index, --put, --stat-copy, --stat-cut, --stat, 
    *                                            --reset, --doc, --help ] 
    * && the command <<am-okay>> has to have at least one option then(if that is the goal) the target directory/directories or 
    * file/files. Example : am-okay --copy <myTargetDir> (for sure without the hyphens)
    * && with the option <--index> there is a limit at the level of the indexes and the indexes have to be 
    * a positive integer(min 0 and max 3)
    * && the <--index>,  <--put> and <--stat> options are linked to the <--array> option
    * && <--stat-copy> is linked to the <--copy> option 
    * && <--stat-cut> is linked to the <--cut> option .
    * && the <--reset> option has to follow by the "request" value .
    *
    *
    * Options :
    * --------
    * :option <--copy> type(string) // This option allows to copy the target file/files or 
    *  directory/directories(that are its targets), you can use the joker <*> to indicate 
    *  everything that is in the current directory. 
    *                                   Ex : am-okay --copy <your-target-dir-or-file> <..>
    *
    * :option <--cut> type(string) // This option allows to cut the target file/files or 
    *  directory/directories(that are its targets), you can use the joker <*> to indicate 
    *  everything that is in the current directory. 
    *                                   Ex : am-okay --cut <your-target-dir-or-file> <..>
    * 
    * :option <--paste-copy> type(string) // This option allows to paste a copy action. 
    *  Ex : am-okay --paste-copy <your-target-directory>
    *  You can use the dot <.> to indicate the current directory. This option(--paste-copy) is 
    *  linked to the <--copy> option.
    *  Use case :
    *            Action 1 -> Ex : am-okay --copy <my-file> 
    *            Action 2 -> Ex : am-okay --paste-copy <my-target-dir>
    *
    * :option <--paste-cut> type(string) // This option allows to paste a cut action. 
    *  Ex : am-okay --paste-cut <your-target-directory>
    *  You can use the dot <.> to indicate the current directory. This option(--paste-cut) is linked 
    *  to the <--cut> option.
    *  Use case :
    *            Action 1 -> Ex : am-okay --cut <my-file> 
    *            Action 2 -> Ex : am-okay --paste-cut <my-target-dir>
    *
    * :option <--array> type(String> // This option allows to copy or cut files or directories in a 
    *  separate way(form of index). Ex : am-okay --array --index 0 --copy <file-1> <dir-1> <dir-2> <..>
    *  For pasting according to the previous action you have to do :               
    *                               Ex : am-okay --array --index 0 --put <your-target-dir>
    *
    * :option <--index> type(String> // This option allows to target the index of the array.
    *  Use case :
    *            Ex : am-okay --array --index 0 --copy <file-1> <dir-1> <dir-2> <..>             
    *            Ex : am-okay --array --index 1 --put <your-target-dir>
    *            Note : 
    *                   1.0 You can not do this -> Ex : am-okay --array --index 0-1 --copy <your-target-dir> <..>
    *                   1.1 You can do this     -> Ex : am-okay --array --index 0-1 --put <your-target-dir>
    *                   1.2 In the previous action(1.1) the <--put> option will manage all actions with the 
    *                       <--array> option that associated with the <--index>>, <--copy> and <--cut> options .
    *
    * :option <--put> type(string) // This option allows to put directory/directories or file/files that have
    *  been targeted by the <--array> option associated with the <--copy> and <--cut> options.
    *  Use case :
    *            Ex : am-okay --array --index 0 --put <your_dir>
    *            Ex : am-okay --array --index 0-3 --put <your_dir> // The indexes between `0` and `3`.
    *            Ex : am-okay --array --index 0,3 --put <your_dir> // The index `0` and `3`.
    *
    * :option <--stat-copy> type(string) // To see the status of an action done with the <--copy> option as first
    *  parameter.
    *            Ex : am-okay --stat-copy
    *
    * :option <--stat-cut> type(string) // To see the status of an action done with the <--cut> option as first
    *  parameter.
    *            Ex : am-okay --stat-cut
    *
    * :option <--stat> type(string) // To see the status of an action done with the <--array> option as first
    *  parameter and along with the <--copy> and <--cut> options or between them.
    *  Use case :
    *            Ex : am-okay --array --index 0 --stat
    *            Ex : am-okay --array --index 0-2 --stat // The indexes between `0` and `2`.
    *            Ex : am-okay --array --index 0,2 --stat // The index `0` and `2`.
    *
    * :option <--reset> type(string) // To reset the desired actions, a prompt will be triggered for the 
    *  possible choices.
    *                                                                Ex : am-okay --doc
    *
    * :option <--doc> type(string) // To see the documentation of the program <am-okay>
    *                                                                Ex : am-okay --doc
    *
    * :option <--help> type(sting) // To get help
    *                         Ex : am-okay --help
    *
    *
    *
    * @ensure Successfully execution if the preconditions are satisfied. That is to say, with the above options 
    * and the appropriated sequences linked to these options.
    *
    *
    *
    * @note This program depends of some programs, these programs are required in the global
    * package am-okay.
    * Once you have pasted files or directories with the <--paste-copy> option, you can paste
    * again the same files/dirs with the same option <--paste-copy>. For sure an action done
    * by <--copy> option requires the <--paste-copy> option for pasting, and an action
    * done by <--cut> option requires <--paste-cut> option for pasting. The two
    * [ --copy, --cut ] options have different hash codes.
    * When you execute the command am-okay , the command in question works with the profile
    * it was run with. Running it with different profiles will result in different scenarios, because
    * for the program each user is different. So when you realise an action, make sure to conserve
    * the same profile to paste.
    * A progress bar will be displayed to indicate the move and copy status when you execute the
    * command am-okay with the <--paste-copy>, <--paste-cut> and <--put> options.
    *
    *
    * @author <BaldÃ© Amadou> <baldeuniversel@protonmail.com>
    *
    *
    *
    * @contributor <Diallo Ismael> <diallois@protonmail.com>
    *
    */

    '

##### Action linked to the command <<am-okay>> .
#####
#####

set -uo pipefail # To exit the script if there is an error

trap "setterm --cursor on" SIGINT

# Declaration variables
listOfParams=("--copy" "--cut" "--paste-copy" "--paste-cut" "--array" \
    "--index" "--put" "--stat-copy" "--stat-cut" "--stat" "--reset" "--doc" "--help" "--version")

counterOption=0


#Check the inputs parameters
for optionUP in ${listOfParams[@]}
do
    if [[ $1 != $optionUP ]]
    then
        counterOption=$(( counterOption + 1 ))
    fi

    #
    if [[ $counterOption -eq 14  ]]
    then
        echo "~"
        echo -e "Unknown `tput setaf 3; tput bold`$1` tput sgr0 ` option \U001F9D0 ."
        exit 1
    fi
done
#
if [[ $1 != "--stat-copy" ]] && [[ $1 != "--stat-cut"  ]] && [[ $1 != "--paste-copy" ]] \
    && [[ $1 != "--paste-cut" ]] && [[ $1 != "--doc" ]] && [[ $1 != "--help" ]] && [[ $1 != "--version" ]] \
    && [[ $# -lt 2 ]] 
then
    echo "~"
    echo "It has to be at least two parameters ."
    exit 1
fi
#
if [[ $1 == "--stat-copy" ]] || [[ $1 == "--stat-cut"  ]]
then
    if [[ $# -ne 1 ]]
    then
        echo "~"
        echo "One parameter is allowed for this action ."
        exit 1
    fi
fi



### Creation of directories, files and functions for the actions linked to the 
# [ --copy, --cut, --paste-copy, --paste-cut, --put, --stat-cut, --stat-put, --stat,
#   --reset, --index, --array, --doc, --help ] options. [tag0]

# Declaration variables
getPersonalUserDir=$HOME
rootDirForActions="$HOME/.local/share/am-okay"
rootDirCopyCutFiles="$rootDirForActions/classic"
copyActionFile="$rootDirCopyCutFiles/copy-action"
cutActionFile="$rootDirCopyCutFiles/cut-action"
copyActionFileOnly="$rootDirCopyCutFiles/copy-action-only"
cutActionFileOnly="$rootDirCopyCutFiles/cut-action-only"

arrayRootDir="$rootDirForActions/array"
arrayIndexInitDir="$arrayRootDir/array-init"
arrayIndex1Dir="$arrayRootDir/array-1"
arrayIndex2Dir="$arrayRootDir/array-2"
arrayIndex3Dir="$arrayRootDir/array-3"
#
arrayIndexInitCopyCutActionFile="$arrayRootDir/array-init/copy-cut-action"
arrayIndexInitCopyCutActionFileOnly="$arrayRootDir/array-init/copy-cut-action-only"
#
arrayIndex1CopyCutActionFile="$arrayRootDir/array-1/copy-cut-action"
arrayIndex1CopyCutActionFileOnly="$arrayRootDir/array-1/copy-cut-action-only"
#
arrayIndex2CopyCutActionFile="$arrayRootDir/array-2/copy-cut-action"
arrayIndex2CopyCutActionFileOnly="$arrayRootDir/array-2/copy-cut-action-only"
#
arrayIndex3CopyCutActionFile="$arrayRootDir/array-3/copy-cut-action"
arrayIndex3CopyCutActionFileOnly="$arrayRootDir/array-3/copy-cut-action-only"

#
globalCounterReject="false"
globalCounterOkay="false"

fileCodeCommandReturn="/tmp/.am-okay/$USER/code-of-return"
fileCodeCommandErrorMv="/tmp/.am-okay/$USER/error-move"
fileCodeCommandErrorCp="/tmp/.am-okay/$USER/error-cp"
filePidCommandMv="/tmp/.am-okay/$USER/pid-mv"
filePidCommandCp="/tmp/.am-okay/$USER/pid-cp"


# Launch a script by an autostart event -> Remove the historical of the actions done by `am-okay` command
if [[ ! -e "$HOME/.config/autostart/am-okay.desktop" ]]
then

    if [[ ! -e "$HOME/.config/autostart" ]]
    then
        mkdir "$HOME/.config/autostart" 2> /dev/null
    fi
    
    echo -e "[Desktop Entry]" >>  "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null 
    echo -e "Type=Application" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Version=1.0" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Name=am-okay" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Exec=bash -c /usr/lib/am-okay/library/am-okay-reset-actions.sh" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Terminal=false" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    echo -e "Categories=System" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null
    
    echo -e "X-GNOME-Autostart-enabled=true" >> "$HOME/.config/autostart/am-okay.desktop" 2> /dev/null 
fi





:   '
# @overview Function to raise an exception .
# :param $1 type(string) // The file where the code of return of the command will be sent .
#
    '
function alertNonEffectiveAction 
{
    # Declaration variables
    getPathOfFileForReturnLastCommand=$1
    getNumberOfLine=0

    if [[ $# -eq 1 ]] && [[ $getPathOfFileForReturnLastCommand != "none" ]]
    then
        if [[ -e "$getPathOfFileForReturnLastCommand" ]]
        then
            getNumberOfLine=` wc -l $getPathOfFileForReturnLastCommand | cut -d " " -f1 | tr -d "[[:space:]]" `

            #
            if [[ $getNumberOfLine -gt 0 ]]
            then
                echo "~"
                echo -en "Something wrong \U001F9D0, please make sure you have a permission to \nexecute the \e[36;1mam-okay\e[0m program "
                echo -en "or you have write permission on the \ntarget directory or the source dir does not include "
                echo -en "in the target dir ."

                #
                setterm -cursor on
                exit 1 
            fi
        fi
    fi
}



:   '
# :param $@ type(string) // Colored the input value(s) .
    '
function colorElem
{
    echo -e "\033[36m$@\033[0m"
}



:   '
# :param $@ type(string) // Truncate the data of the input file .
    '
function truncateFileData
{
    # Remove the data of these target files
    truncate -s 0 $@ 2> /dev/null
    echo "~"
    echo -e "Done \U002705 ."
}



:   '
# :param $1 type(array) // An array containing two values(min, max) .
    '
function maxMin 
{
    # Declaration variables
    local maxValueIndex=0
    local minValueIndex=0
    local -a arrayMaxMin=()
    local getFirstInt=""
    local getSecondInt=""

    #
    if [[ ` echo "$1" | grep -E -- "-"  `  ]]
    then
        getFirstInt=` echo "$1" | cut -d "-" -f1 `
        getSecondInt=` echo "$1" | cut -d "-" -f2 `
    elif [[ ` echo "$1" | grep -E -- ","  `  ]]
    then
        getFirstInt=` echo "$1" | cut -d "," -f1 `
        getSecondInt=` echo "$1" | cut -d "," -f2 `
    fi

    # Set the min and max value 
    if [[ $getFirstInt -lt $getSecondInt ]]
    then
        maxValueIndex=$getSecondInt
        minValueIndex=$getFirstInt
    elif [[ $getFirstInt -gt $getSecondInt ]]
    then
        maxValueIndex=$getFirstInt
        minValueIndex=$getSecondInt
    else
        maxValueIndex=$getFirstInt
        minValueIndex=$maxValueIndex
    fi
    
    #
    arrayMaxMin=($maxValueIndex $minValueIndex)
    echo ${arrayMaxMin[*]}
}



:   '
# :param $1 type(string) // This parameter represents an action `copy` or `cut` .
# :param $2 type(int || string) // The index of the array or none value .
    '
function arrayStatus
{
    local statusCopyCutActionFile=$1
    local indexValue=$2

    #
    if [[ -s $statusCopyCutActionFile ]] && [[ -e "$statusCopyCutActionFile" ]] && \
        [[ ` wc -l "$statusCopyCutActionFile" | cut -d " " -f1 ` -gt 2 ]]
    then
        cat $statusCopyCutActionFile 2> $fileCodeCommandReturn
        
        # Call the function `alertNonEffectiveAction`
        alertNonEffectiveAction $fileCodeCommandReturn

        #
        truncate -s 0 $fileCodeCommandReturn
    elif [[ -e "$statusCopyCutActionFile" ]]
    then
        echo "~"
        echo -e `tput setaf 3; tput bold`"There isn't a copy/cut action \U001F9D0 for the index $indexValue ."`tput sgr0`
        echo ""
    else
        echo "~"
        echo "Something wrong â ï¸  , missing dependency (reinstall the program) ."
        exit 1
    fi
}



:   '
# :param $1 type(string) // The action that has to be done via (ex : --copy, --cut, --array ...) . 
# :param $2 type(string) // This parameter represents a header of some files, the possible headers are
#                           "Copy Action" or "Cut Action" .
# :param $3 type(string) // The target files/directories .
# :param $4 type(int || string) // The index value of the array or none value .
    '
function copyCutAction 
{
    # Declaration local variables
    local actionRequested=$1
    local headerFile=$2
    local targetElems=()
    local indexValue=$4
    local statusCopyCutActionFile=""
    local onlyCopyCutActionFile=""
    #
    local counter=0
    local getCurrentPath=` pwd `
 
    # Redefine the `separator`
    saveIFS=$IFS
    IFS="?"

    # Append the files/dirs in the array
    for dir_file in `echo $3 `
    do
        targetElems+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
    done

    # Restore the separator
    IFS=$saveIFS

    
    # Set the proper value to the global variables according the actions requested
    if ( [[ $actionRequested == "--copy" ]] || [[ $actionRequested == "--cut" ]] ) && [[ $indexValue == "none" ]]
    then

        if [[ $actionRequested == "--copy" ]]
        then
            #
            statusCopyCutActionFile=$copyActionFile
            onlyCopyCutActionFile=$copyActionFileOnly
        elif [[ $actionRequested == "--cut" ]]
        then
            #
            statusCopyCutActionFile=$cutActionFile
            onlyCopyCutActionFile=$cutActionFileOnly
        fi

    elif [[ $actionRequested == "--array" ]] && [[ $indexValue -eq 0 ]]
    then
        #
        statusCopyCutActionFile=$arrayIndexInitCopyCutActionFile
        onlyCopyCutActionFile=$arrayIndexInitCopyCutActionFileOnly

    elif [[ $actionRequested == "--array" ]] && [[ $indexValue -eq 1 ]]
    then
        #
        statusCopyCutActionFile=$arrayIndex1CopyCutActionFile
        onlyCopyCutActionFile=$arrayIndex1CopyCutActionFileOnly

    elif [[ $actionRequested == "--array" ]] && [[ $indexValue -eq 2 ]]
    then
        #
        statusCopyCutActionFile=$arrayIndex2CopyCutActionFile
        onlyCopyCutActionFile=$arrayIndex2CopyCutActionFileOnly

    elif [[ $actionRequested == "--array" ]] && [[ $indexValue -eq 3 ]]
    then
        #
        statusCopyCutActionFile=$arrayIndex3CopyCutActionFile
        onlyCopyCutActionFile=$arrayIndex3CopyCutActionFileOnly
    fi


    # Check the existence of directory/directories or file/files and do ...
    for elemDirFile in ${targetElems[@]}
    do
        #
        if [[ ! ( -e "$elemDirFile" ) ]]
        then
            echo "~"
            echo -e "Something wrong \U001F9D0, at least one file or directory does not exist ."
            exit 1
        else
            elemDirFile=` echo $elemDirFile | \
                awk '{ if (substr($0, length($0), 1) == "/") $0 = substr($0, 1, length($0)-1); print }' `
        fi

        # Erase the content of the file linked to the variable `$copyActionFile` and add 
        # a header `Copy action`
        if [[ $counter -eq 0 ]]
        then
            if [[ $actionRequested == "--copy" ]] || [[ $actionRequested == "--cut" ]]
            then
                # Add a header to the file linked to the variable `$statusCopyCutActionFile`
                echo "$headerFile : " | awk '{ print ORS, "\033[32m"$0"\033[0m" }' > $statusCopyCutActionFile
            else
                # Add a header to the file linked to the variable `$statusCopyCutActionFile`
                echo "" > $statusCopyCutActionFile
                echo "$headerFile [$indexValue] : " | awk '{ print "\033[32m"$0"\033[0m" }' >> $statusCopyCutActionFile
            fi

            # Erase the data that is in the `$onlyCopyCutActionFile`
            if [[ ! ( -e $onlyCopyCutActionFile ) ]]
            then
                touch $onlyCopyCutActionFile 2> $fileCodeCommandReturn

                # Call the function
                alertNonEffectiveAction $fileCodeCommandReturn

                #
                truncate -s 0 $fileCodeCommandReturn
            else
                truncate -s 0 $onlyCopyCutActionFile
            fi
            #
        fi

        # Add of the content according the target elements(dirs/files)
        if [[ -e "$getCurrentPath/$elemDirFile" ]]
        then
            if [[ $actionRequested == "--copy" ]] || [[ $actionRequested == "--cut" ]]
            then
                echo -e "             $counter -> ${getCurrentPath}/${elemDirFile}" | awk '{ print "\033[36m"$0"\033[0m" }' \
                >> $statusCopyCutActionFile
                echo -e "${getCurrentPath}/${elemDirFile}" >> $onlyCopyCutActionFile
            else
                echo -e "                $counter -> ${getCurrentPath}/${elemDirFile}" | awk '{ print "\033[36m"$0"\033[0m" }' \
                >> $statusCopyCutActionFile
                echo -e "${getCurrentPath}/${elemDirFile}" >> $onlyCopyCutActionFile
            fi
            
        else
            if [[ $actionRequested == "--copy" ]] || [[ $actionRequested == "--cut" ]]
            then
                echo -e "             $counter -> $elemDirFile" | awk '{ print "\033[36m"$0"\033[0m" }' \
                >> $statusCopyCutActionFile
                echo -e "$elemDirFile" >> $onlyCopyCutActionFile
            else
                echo -e "                $counter -> $elemDirFile" | awk '{ print "\033[36m"$0"\033[0m" }' \
                >> $statusCopyCutActionFile
                echo -e "$elemDirFile" >> $onlyCopyCutActionFile
            fi
        fi
               
        # Increment the `$counter`
        counter=$(( counter + 1 ))
    done


}



:   '
# :param $1 type(string) // The action that has to be done via (ex : --copy, --cut, --array ...) .
# :param $2 type(int || string) // The index value of the array or none value .
    '
function statAction
{
    # Declaration local variables
    local actionRequested=$1
    local indexValue=$2
    local statusCopyCutActionFile=""
   
    #
    if [[ $1 == "--copy"  ]] && [[ $indexValue == "none" ]]
    then
        #
        statusCopyCutActionFile=$copyActionFile

        if [[ -s $statusCopyCutActionFile ]] && [[ -e "$statusCopyCutActionFile" ]] && \
            [[ ` wc -l "$statusCopyCutActionFile" | cut -d " " -f1 ` -gt 2 ]]
        then
            cat $statusCopyCutActionFile 2> $fileCodeCommandReturn

            # Call the function `alertNonEffectiveAction`
            alertNonEffectiveAction $fileCodeCommandReturn

            #
            truncate -s 0 $fileCodeCommandReturn
            exit 0
        elif [[ -e "$statusCopyCutActionFile" ]]
        then
            echo "~"
            echo -e `tput setaf 3; tput bold`"There isn't a copy action \U001F9D0 ."`tput sgr0`
            exit 0
        else
            echo "~"
            echo "Something wrong â ï¸  , missing dependency (reinstall the program) ."
            exit 1
        fi

    elif [[ $1 == "--cut"  ]] && [[ $indexValue == "none" ]]
    then
        #
        statusCopyCutActionFile=$cutActionFile

        if [[ -s $statusCopyCutActionFile ]] && [[ -e "$statusCopyCutActionFile" ]] && \
            [[ ` wc -l "$statusCopyCutActionFile" | cut -d " " -f1 ` -gt 2 ]]
        then
            cat $statusCopyCutActionFile 2> $fileCodeCommandReturn

            # Call the function `alertNonEffectiveAction`
            alertNonEffectiveAction $fileCodeCommandReturn

            #
            truncate -s 0 $fileCodeCommandReturn
            exit 0
        elif [[ -e "$statusCopyCutActionFile" ]]
        then
            echo "~"
            echo -e `tput setaf 3; tput bold`"There isn't a cut action \U001F9D0 ."`tput sgr0`
            exit 0
        else
            echo "~"
            echo "Something wrong â ï¸  , missing dependency (reinstall the program) ."
            exit 1
        fi

    elif [[ $1 == "--array" ]] && [[ $indexValue -eq 0 ]]
    then
        # Call the function `arrayStatus`
        arrayStatus $arrayIndexInitCopyCutActionFile 0

    elif [[ $1 == "--array" ]] && [[ $indexValue -eq 1 ]]
    then
        # Call the function `arrayStatus`
        arrayStatus $arrayIndex1CopyCutActionFile 1

    elif [[ $1 == "--array" ]] && [[ $indexValue -eq 2 ]]
    then
        # Call the function `arrayStatus`
        arrayStatus $arrayIndex2CopyCutActionFile 2

    elif [[ $1 == "--array" ]] && [[ $indexValue -eq 3 ]]
    then
        # Call the function `arrayStatus`
        arrayStatus $arrayIndex3CopyCutActionFile 3
    fi
}



:   '
# :param $1 type(string) // The action that has to be done via (ex : --copy, --cut, --array ...) .
# :param $2 type(string) // The target files/directories .
# :param $3 type(int || string) // The index value of the array or none value .
# :param $4 type(string) // An array action with the option `--put` .
    '
function pasteAction
{
    # Declaration local variables
    local actionRequested=$1
    local targetDir="$2"
    local indexUP=$3
    local arrayPut=$4
    local onlyCopyCutActionFile=""
    local statusCopyCutActionFile=""
    local getHeaderCopyCut=""

    if [[ $actionRequested == "--paste-copy" ]] || [[ $actionRequested == "--paste-cut" ]]
    then
        #
        if [[ $actionRequested == "--paste-copy"  ]]
        then
            onlyCopyCutActionFile=$copyActionFileOnly
            statusCopyCutActionFile=$copyActionFile
        else
            onlyCopyCutActionFile=$cutActionFileOnly
            statusCopyCutActionFile=$cutActionFile
        fi
    elif [[ $actionRequested == "--array" ]] && [[ $arrayPut == "--put" ]]
    then
        if [[ $indexUP -eq 0 ]]
        then
            onlyCopyCutActionFile=$arrayIndexInitCopyCutActionFileOnly
            statusCopyCutActionFile=$arrayIndexInitCopyCutActionFile
            getHeaderCopyCut=` cat $arrayIndexInitCopyCutActionFile | grep "Cut\|Copy" | cut -d "A" -f1 | tr -d " "  2> /dev/null `
        elif [[ $indexUP -eq 1 ]]
        then
            onlyCopyCutActionFile=$arrayIndex1CopyCutActionFileOnly 
            statusCopyCutActionFile=$arrayIndex1CopyCutActionFile
            getHeaderCopyCut=` cat $arrayIndex1CopyCutActionFile | grep "Cut\|Copy" | cut -d "A" -f1 | tr -d " "  2> /dev/null `
        elif [[ $indexUP -eq 2 ]]
        then
            onlyCopyCutActionFile=$arrayIndex2CopyCutActionFileOnly
            statusCopyCutActionFile=$arrayIndex2CopyCutActionFile
            getHeaderCopyCut=` cat $arrayIndex2CopyCutActionFile | grep "Cut\|Copy" | cut -d "A" -f1 | tr -d " "  2> /dev/null `
        elif [[ $indexUP -eq 3 ]]
        then
            onlyCopyCutActionFile=$arrayIndex3CopyCutActionFileOnly
            statusCopyCutActionFile=$arrayIndex3CopyCutActionFile
            getHeaderCopyCut=` cat $arrayIndex3CopyCutActionFile | grep "Cut\|Copy" | cut -d "A" -f1 | tr -d " "  2> /dev/null `
        fi
    fi

    # If the target directory is the current directory -> do `pwd` else if get the given directory or raise an exception
    if [[ "$targetDir" == "." ]]
    then
        targetDir=` pwd `
    elif [[ -e "$targetDir"  ]] && [[ -d "$targetDir" ]]
    then
        targetDir=` echo "$2" | awk '{ if ( substr($0, length($0), 1) == "/" ) $0 = substr($0, 1, length($0)-1); print }' `
    else
        # Exit the program
        echo "~"
        echo -e "\U001F9D0 Wrong target ` tput setaf 6; tput bold `$2` tput sgr0 ` ."
        exit 1
    fi
    
    #
    if [[ -s "$onlyCopyCutActionFile" ]] && [[ -e "$onlyCopyCutActionFile" ]] && \
        [[ ` wc -l "$onlyCopyCutActionFile" | cut -d " " -f1 ` -gt 0 ]]
    then
        # Disable the cursor in the console/terminal
        setterm -cursor off
        
        #
        if ( [[ $actionRequested == "--paste-copy" ]] ) || ( [[ $actionRequested == "--array" ]] \
            && [[ $arrayPut == "--put" ]] && [[ ` echo "$getHeaderCopyCut" | grep "Copy" ` ]] )
        then
            #
            echo -e ""

            while IFS= read -r readLine
            do
                # Get the end file/target from the path ...
                getEndFileDir=` echo "$readLine" | tac -s "/" | head -n 1 `
                
                # Copy only the files/dirs that exist
                if [[ -e "$readLine" ]]
                then
                    # Copy the files/directories towards the given directory
                    cp -ra "$readLine" "$targetDir" 2> $fileCodeCommandErrorCp &
                    
                    # Store the pid of the last command
                    echo "$!" > $filePidCommandCp

                    #
                    sleep 0.0005

                    # Call the function ->  ` alertNonEffectiveAction `
                    alertNonEffectiveAction $fileCodeCommandErrorCp 

                    truncate -s 0 $fileCodeCommandErrorCp
                
                    #
                    if [[ -f "$readLine" ]] && [[ ! ( -e "$targetDir/$getEndFileDir" ) ]]
                    then
                        touch "$targetDir/$getEndFileDir" 2> $fileCodeCommandReturn

                        # Call the function ->  ` alertNonEffectiveAction `
                        alertNonEffectiveAction $fileCodeCommandReturn

                        #
                        truncate -s 0 $fileCodeCommandReturn

                    elif [[ -d "$readLine" ]] && [[ ! ( -e "$targetDir/$getEndFileDir" ) ]]
                    then
                        mkdir -p "$targetDir/$getEndFileDir" 2> $fileCodeCommandReturn

                        # Call the function ->  ` alertNonEffectiveAction `
                        alertNonEffectiveAction $fileCodeCommandReturn

                        #
                        truncate -s 0 $fileCodeCommandReturn
                    fi

                    # Display the status of the transfer
                    /usr/lib/am-okay/library/progress-bar-copy.sh "$readLine" "$targetDir/$getEndFileDir"

                    #
                    globalCounterOkay="true"
                    truncate -s 0 $fileCodeCommandReturn 2> /dev/null
                    truncate -s 0 $filePidCommandCp 2> /dev/null
                else
                    # Replace the current line of the files by empty line
                    sed -i "s|.*`echo $readLine `.*||" $onlyCopyCutActionFile
                    sed -i "s|.*`echo $readLine `.*||" $statusCopyCutActionFile

                    #
                    globalCounterReject="true"
                fi
            done < $onlyCopyCutActionFile

            # Delete the empty lines 
            sed -i "1,$ {/^[[:space:]]*$/d}" $onlyCopyCutActionFile
            sed -i "2,$ {/^[[:space:]]*$/d}" $statusCopyCutActionFile
            
            if [[ $globalCounterReject == "true" ]] && [[ $globalCounterOkay == "true" ]]
            then
                echo "~"
                echo "At lease one file or directory was not copied  â ï¸  ."

                # Reset
                globalCounterReject="false"
                globalCounterOkay="false"
            elif [[ $globalCounterReject == "true" ]] && [[ $globalCounterOkay == "false" ]]
            then
                echo "~"
                echo "Nothing to paste, the source files or directories seem to have been moved  â ï¸  ."

                # Reset
                globalCounterReject="false"
                globalCounterOkay="false"
            fi
        elif [[ $actionRequested == "--paste-cut"  ]] || ( [[ $actionRequested == "--array" ]] \
            && [[ $arrayPut == "--put" ]] && [[ ` echo "$getHeaderCopyCut" | grep "Cut" ` ]] )
        then
            while IFS= read -r readLine
            do
                # Get the end file/target from the path ...
                getEndFileDir=` echo "$readLine" | tac -s "/" | head -n 1 `
                
                # Move only the files/dirs that exist
                if [[ -e "$readLine" ]]
                then

                    # Verify if the user has the permission to write in the target directory
                    touch "$targetDir/.test-write-from-am-okay" 2> $fileCodeCommandReturn

                    # Call the function ->  ` alertNonEffectiveAction `
                    alertNonEffectiveAction $fileCodeCommandReturn

                    #
                    truncate -s 0 $fileCodeCommandReturn 2> /dev/null
                    rm -r "$targetDir/.test-write-from-am-okay" 2> /dev/null

                    # Move the files/directories towards the given directory
                    if [[ ! ( "$readLine" == "$targetDir" ) ]]
                    then
                        mv --backup=numbered "$readLine" "$targetDir" 2> $fileCodeCommandErrorMv &
                        
                        # Store the pid of the last command
                        echo "$!" > $filePidCommandMv

                        #
                        sleep 0.0005

                        if [[ -s "$fileCodeCommandErrorMv" ]]
                        then
                            echo "~"
                            echo -e "Action rejected for the file/dir [ $readLine ] -> same parent target â ï¸  "
                            
                            #
                            truncate -s 0 "$fileCodeCommandErrorMv" 2> /dev/null

                            #
                            continue
                        else
                            # Display the status of the transfer
                            /usr/lib/am-okay/library/progress-bar-cut.sh "$readLine" "$targetDir/$getEndFileDir"

                            truncate -s 0 $filePidCommandMv 2> /dev/null
                        fi  
                    else
                        echo "~"
                        echo -e "Action rejected for the file/dir [ $readLine ] -> same parent target â ï¸  "
                        
                        #
                        continue
                    fi
                
                    # Replace the current line of the files by empty line
                    sed -i "s|.*`echo $readLine `.*||" $onlyCopyCutActionFile
                    sed -i "s|.*`echo $readLine `.*||" $statusCopyCutActionFile

                    #
                    globalCounterOkay="true"
                else
                    # Replace the current line of the files by empty line
                    sed -i "s|.*`echo $readLine `.*||" $onlyCopyCutActionFile
                    sed -i "s|.*`echo $readLine `.*||" $statusCopyCutActionFile

                    #
                    globalCounterReject="true"
                fi
            done < $onlyCopyCutActionFile

            # Delete the empty lines
            sed -i "1,$ {/^[[:space:]]*$/d}" $onlyCopyCutActionFile
            sed -i "2,$ {/^[[:space:]]*$/d}" $statusCopyCutActionFile
            
            #
            if [[ $globalCounterReject == "true" ]] && [[ $globalCounterOkay == "true" ]]
            then
                echo "~"
                echo "At lease one file or directory was not copied  â ï¸  ."

                # Reset
                globalCounterReject="false"
                globalCounterOkay="false"
            elif [[ $globalCounterReject == "true" ]] && [[ $globalCounterOkay == "false" ]]
            then
                echo "~"
                echo "Nothing to paste, the source files or directories seem to have been moved  â ï¸  ."
                echo ""
                # Reset
                globalCounterReject="false"
                globalCounterOkay="false"
            fi
        fi

        # Enable the cursor in the console/terminal
        setterm -cursor on
    else
        if [[ -e "$onlyCopyCutActionFile" ]] && [[ ` wc -l "$onlyCopyCutActionFile" | cut -d " " -f1 ` -lt 1 ]]
        then
            if [[ $indexUP != "none" ]]
            then
                echo "~"
                echo -e "Nothing to paste for the ` colorElem index $indexUP ` \U001F9D0 ."
                echo ""
            else
                echo "~"
                echo -e "Nothing to paste \U001F9D0 ."
            fi
        elif [[ ! ( -e "$onlyCopyCutActionFile" ) ]]
        then
            echo "~"
            echo "Something wrong, missing dependency  â ï¸  ."
            exit 1
        fi 
    fi

}



# Creation dirs where the error code will be sent
if [[ ! ( -e "/tmp/.am-okay/$USER" ) ]]
then
    mkdir -p "/tmp/.am-okay/$USER" 2> /dev/null
    chmod 700 "/tmp/.am-okay/$USER" 2> /dev/null
fi

# Creation the root directory for the `am-okay` actions
if [[ ! ( -e "$rootDirForActions" ) ]]
then
    mkdir -p $rootDirForActions 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction`
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi

# Creating a root directory for the files -> `copyActionFile` and `cutActionFile`
if [[ ! ( -e "$rootDirCopyCutFiles" ) ]]
then
    mkdir -p $rootDirCopyCutFiles 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction`
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi

# Creating of files for the <--copy> action
if [[ ! ( -e "$copyActionFile" ) ]]
then
    touch $copyActionFile 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction` 
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi
#
if [[ ! ( -e "$copyActionFileOnly" )  ]]
then
    touch $copyActionFileOnly 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction` 
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi

# Creating of files for the <--cut> action
if [[ ! ( -e "$cutActionFile" ) ]]
then
    touch $cutActionFile 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction` 
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi
#
if [[ ! ( -e "$cutActionFileOnly" )  ]]
then
    touch $cutActionFileOnly 2> $fileCodeCommandReturn

    # Call the function -> `alertNonEffectiveAction` 
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi

# Creating the directories associated to the `--array` option
if [[ ! ( -e "$arrayRootDir" ) ]]
then
    #
    mkdir -p $arrayRootDir $arrayIndexInitDir $arrayIndex1Dir $arrayIndex2Dir $arrayIndex3Dir 2> $fileCodeCommandReturn
    
    # Call the function <<alertNonEffectiveAction>>
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn

    #
    touch $arrayIndexInitCopyCutActionFile $arrayIndexInitCopyCutActionFileOnly $arrayIndex1CopyCutActionFile \
          $arrayIndex1CopyCutActionFileOnly $arrayIndex2CopyCutActionFile $arrayIndex2CopyCutActionFileOnly \
          $arrayIndex3CopyCutActionFile $arrayIndex3CopyCutActionFileOnly 2> $fileCodeCommandReturn

    # Call the function <<alertNonEffectiveAction>>
    alertNonEffectiveAction $fileCodeCommandReturn

    #
    truncate -s 0 $fileCodeCommandReturn
fi

### End of [tag0]


### Manage the actions done by the [ --copy, --cut, --stat-copy, --stat-cut, --paste-copy, 
#   --paste-cut ] options.
# Here is the path of the python program -> `/usr/lib/am-okay/library/progress-bar` . [tag1] 

# Copy or cut action for the `--copy`, `--cut`, or `--array` option as first parameter
if [[ $1 == "--copy" ]] || [[ $1 == "--cut" ]]
then
    #
    if [[ $1 == "--copy" ]]
    then
        # Shift one position -> `--copy`
        shift 1

        #
        arrayDirsFiles=()

        # Backup the `input field separator`
        saveIFS=$IFS
        IFS=$"\n"

        # Put the files/dirs in the array
        for dir_file in $@
        do
            arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
            arrayDirsFiles+="?"
        done
        
        # Restore 
        IFS=$saveIFS

        # Call the function `copyCutAction`
        copyCutAction "--copy" "Copy Action" " ` echo ${arrayDirsFiles[@]} ` " "none"
        exit 0

    elif [[ $1 == "--cut" ]]
    then
        # Shift one position -> `--cut`
        shift 1

        #
        arrayDirsFiles=()

        # Backup the `input field separator`
        saveIFS=$IFS
        IFS=$"\n"

        # Put the files/dirs in the array
        for dir_file in $@
        do
            arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
            arrayDirsFiles+="?"
        done
        
        # Restore 
        IFS=$saveIFS


        # Call the function `copyCutAction`
        copyCutAction "--cut" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" "none"
        exit 0
    fi 

elif ( [[ $1 == "--array" ]] && [[ $# -lt 4 ]] ) 
then    
    echo "~"
    echo -e "Invalid request \U001F9D0 ."
    exit 1

elif ( [[ $1 == "--array" ]] && [[ $2 == "--index" ]] ) && \
    ( [[ $4 == "--copy" ]] || [[ $4 == "--cut" ]] ) && \
    ( [[ ` echo "$3" | grep -E "^[0-3]{1,1}$" ` ]] )
then

    # Verify if there is at least five parameters(example : for the target file/dir)
    if [[ $# -lt 5  ]]
    then
        echo "~"
        echo -e "Invalid request \U001F9D0 ."
        exit 1
    fi

    if [[ $2 == "--index" ]]
    then
        if [[ $3 -eq 0 ]]
        then
            if [[ $4 == "--copy" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$"\n"

                # Put the files/dirs in the array
                for dir_file in $@
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Copy Action" "` echo ${arrayDirsFiles[@]} `" 0
                exit 0

            elif [[ $4 == "--cut" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$"\n"

                # Put the files/dirs in the array
                for dir_file in $@
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" 0
                exit 0
            fi  
        elif [[ $3 -eq 1 ]]
        then
            if [[ $4 == "--copy" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$"\n"

                # Put the files/dirs in the array
                for dir_file in $@
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Copy Action" "` echo ${arrayDirsFiles[@]} `" 1
                exit 0

            elif [[ $4 == "--cut" ]]
            then
                # Shift four positions 
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$"\n"

                # Put the files/dirs in the array
                for dir_file in $@
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" 1
                exit 0
            fi 
        elif [[ $3 -eq 2 ]]
        then
            if [[ $4 == "--copy" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$"\n"

                # Put the files/dirs in the array
                for dir_file in $@
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Copy Action" "` echo ${arrayDirsFiles[@]} `" 2
                exit 0
            elif [[ $4 == "--cut" ]]
            then
                # Shift four positions 
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$"\n"

                # Put the files/dirs in the array
                for dir_file in $@
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" 2
                exit 0
            fi 
        elif [[ $3 -eq 3 ]]
        then
            if [[ $4 == "--copy" ]]
            then
                # Shift four positions
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$"\n"

                # Put the files/dirs in the array
                for dir_file in $@
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Copy Action" "` echo ${arrayDirsFiles[@]} `" 3
                exit 0
            elif [[ $4 == "--cut" ]]
            then
                # Shift four positions 
                shift 4

                #
                arrayDirsFiles=()

                # Backup the `input field separator`
                saveIFS=$IFS
                IFS=$"\n"

                # Put the files/dirs in the array
                for dir_file in $@
                do
                    arrayDirsFiles+=` echo "$dir_file" | awk '{ gsub(/^[ \t]+|[ \t]+$/, ""); print }' `
                    arrayDirsFiles+="?"
                done
        
                # Restore 
                IFS=$saveIFS


                # Call the function `copyCutAction`
                copyCutAction "--array" "Cut  Action" "` echo ${arrayDirsFiles[@]} `" 3
                exit 0
            fi     
        else
            echo "~"
            echo "Something wrong â ï¸  , index overwhelmed(max 3 -> positive) ."
            exit 1
        fi
    fi
elif ( [[ $1 == "--array" ]] ) && ( [[ $4 == "--cut" ]] || [[ $4 == "--copy" ]] ) 
then
    if [[  $# -lt 5  ]]
    then
        echo "~"
        echo -e "Invalid request \U001F9D0 ."
        exit 1
    fi
fi

# Stat of the copy and cut actions done by the [ --copy, --cut, --array ] options 
if [[ $1 == "--stat-copy"  ]]
then
    # Call the function `statAction`
    statAction "--copy" "none"
    exit 0

elif [[ $1 == "--stat-cut" ]]
then
    # Call the function `statAction`
    statAction "--cut" "none"
    exit 0

elif [[ $1 == "--array" ]] && [[ $# -lt 4 ]]
then    
    echo "~"
    echo -e "Invalid request \U001F9D0 ."
    exit 1

elif ( [[ $1 == "--array" ]] && [[ $2 == "--index" ]] && [[ $# -eq 4 ]] && [[ $4 == "--stat" ]] ) && \
    ( [[ ` echo "$3" | grep -E "^[0-3]{1,1}-[0-3]{1,1}$" ` ]] \
    || [[ ` echo "$3" | grep -E "^[0-3]{1,1},[0-3]{1,1}$" ` ]] \
    || [[ ` echo "$3" | grep -E "^[0-3]{1,1}$" ` ]] )

then
    if [[ $2 == "--index" ]]
    then
        if [[ $3 == 0 ]] 
        then
            # Call the function `statAction`
            statAction "--array" 0
            exit 0

        elif [[ $3 == 1 ]]
        then
            # Call the function `statAction`
            statAction "--array" 1
            exit 0

        elif [[ $3 == 2 ]]
        then
            # Call the function `statAction`
            statAction "--array" 2
            exit 0

        elif [[ $3 == 3 ]]
        then
            # Call the function `statAction`
            statAction "--array" 3
            exit 0

        elif [[ ` echo "$3" | grep -E "^[0-3]{1,1}-[0-3]{1,1}$" ` ]]
        then
            # Call the function `maxMin`
            getResultArray=$(maxMin $3)
            
            #
            maxValueIndex=` echo ${getResultArray[@]} | cut -d " " -f1 `
            minValueIndex=` echo ${getResultArray[@]} | cut -d " " -f2 `
       
            # Print the status
            for indexUP in ` seq $minValueIndex $maxValueIndex `
            do
                # Call the function `statAction`
                statAction "--array" $indexUP  
            done

            #
            exit 0
        elif [[ ` echo "$3" | grep -E "^[0-3]{1,1},[0-3]{1,1}$" ` ]]
        then
        
            # Call the function `maxMin`
            getResultArray=$(maxMin $3)

            #
            maxValueIndex=` echo ${getResultArray[@]} | cut -d " " -f1 `
            minValueIndex=` echo ${getResultArray[@]} | cut -d " " -f2 `
        
            # Print the status
            for indexUP in `seq 2`
            do
                if [[ $indexUP -eq 1 ]]
                then
                    # Call the function `statAction`
                    statAction "--array" $minValueIndex
                else
                    # Call the function `statAction`
                    statAction "--array" $maxValueIndex
                fi 
            done

            #
            exit 0
        else

            echo "~"
            echo "Something wrong â ï¸  , index overwhelmed(max 3 -> positive) ."
            exit 1
        fi
    fi
fi

# Paste action for the `--copy`, `--paste`, `--array` options as first parameter
if ( [[ $1 == "--paste-copy" ]] || [[ $1 == "--paste-cut" ]] ) && [[ $# -eq 2 ]]
then
    # Declaration variables
    targetDir="$2"
    
    if [[ $1 == "--paste-copy" ]]
    then
        # Call the function `pasteAction`
        pasteAction "--paste-copy" "$targetDir" "none" "none"
        exit 0

    elif [[ $1 == "--paste-cut" ]]
    then
        # Call the function `pasteAction`
        pasteAction "--paste-cut" "$targetDir" "none" "none"
        exit 0
    fi    
elif ( [[ $1 == "--array" ]] && [[ $4 == "--put" ]] && [[ $2 == "--index" ]] ) && \
    ( [[ ` echo "$3" | grep -E "^[0-3]{1,1}-[0-3]{1,1}$" ` ]] || \
    [[ ` echo "$3" | grep -E "^[0-3]{1,1},[0-3]{1,1}$" ` ]] || \
    [[ ` echo "$3" | grep -E "^[0-3]{1,1}$" ` ]] )
then
    
    #
    if [[ $# -lt 5 ]]
    then
        echo "~"
        echo -e "Invalid request \U001F9D0 ."

        exit 1
    fi

    if [[ $2 == "--index" ]]
    then
        if [[ $3 -eq 0 ]] && [[ ` echo "$3" | grep -vE "[,-]" ` ]]
        then
            # Declaration variables
            targetDir="$5"

            # Call the function `pasteAction`
            pasteAction "--array" "$targetDir" 0 "--put"
            exit 0
        elif [[ $3 -eq 1 ]] && [[ ` echo "$3" | grep -vE "[,-]" ` ]]
        then
            # Declaration variables
            targetDir="$5"

            # Call the function `pasteAction`
            pasteAction "--array" "$targetDir" 1 "--put"
            exit 0
        elif [[ $3 -eq 2 ]] && [[ ` echo "$3" | grep -vE "[,-]" ` ]]
        then
            # Declaration variables
            targetDir="$5"

            # Call the function `pasteAction`
            pasteAction "--array" "$targetDir" 2 "--put"
            exit 0
        elif [[ $3 -eq 3 ]] && [[ ` echo "$3" | grep -vE "[,-]" ` ]]
        then
            # Declaration variables
            targetDir="$5"

            # Call the function `pasteAction`
            pasteAction "--array" "$targetDir" 3 "--put"
            exit 0
        elif [[ ` echo "$3" | grep -E "^[0-3]{1,1}[-][0-3]{1,1}$" ` ]] && [[ ` echo "$3" | grep -vE "[,]" ` ]]
        then
            # Declaration variables
            targetDir="$5"
            getResultArray=()

            # Call the function `maxMin`
            getResultArray=$(maxMin $3)
            
            #
            maxValueIndex=` echo ${getResultArray[@]} | cut -d " " -f1 `
            minValueIndex=` echo ${getResultArray[@]} | cut -d " " -f2 `
             
            # Print the status
            for indexUP in ` seq $minValueIndex $maxValueIndex `
            do
                # Call the function `pasteAction`
                pasteAction "--array" "$targetDir" $indexUP "--put" 
            done

            #
            exit 0
        elif [[ ` echo "$3" | grep -E "^[0-3]{1,1}[,][0-3]{1,1}$" ` ]]
        then
            # Declaration variables
            targetDir="$5"
            getResultArray=()

            # Call the function `maxMin`
            getResultArray=$(maxMin $3)
            
            #
            maxValueIndex=` echo ${getResultArray[@]} | cut -d " " -f1 `
            minValueIndex=` echo ${getResultArray[@]} | cut -d " " -f2 `
             
            # Print the status
            for indexUP in `seq 1 2`
            do
                if [[ $indexUP -eq 1 ]]
                then
                    # Call the function `pasteAction`
                    pasteAction "--array" "$targetDir" $minValueIndex "--put" 
                else
                    # Call the function `pasteAction`
                    pasteAction "--array" "$targetDir" $maxValueIndex "--put" 
                fi 
            done

            #
            exit 0
        fi
    fi
fi

### End of [tag1]


### Reset action . [tag2]
if [[ $1 == "--reset" ]] && [[ $# -eq 2 ]] && [[ $2 == "request" ]]
then
    # Declaration variables
    choiceUP=""
    requestQuit=""

    while [[ $choiceUP != "exit" ]]
    do
        echo "~"
        echo -e "Make your choice for the reset (encode \`$(colorElem "exit")\` to quit) <:> "
        echo ""
        echo -e "Choice \`$(colorElem 0)\` to reset a copy action"
        echo -e "Choice \`$(colorElem 1)\` to reset a cut action"
        echo -e "Choice \`$(colorElem 2)\` to reset both \`$(colorElem 0)\` and \`$(colorElem 1)\` choices"
        echo -e ""
        echo -e "Choice \`$(colorElem 3)\` to reset an array action index $(colorElem 0)"
        echo -e "Choice \`$(colorElem 4)\` to reset an array action index $(colorElem 1)"
        echo -e "Choice \`$(colorElem 5)\` to reset an array action index $(colorElem 2)"
        echo -e "Choice \`$(colorElem 6)\` to reset an array action index $(colorElem 3)"
        echo -e "Choice \`$(colorElem 7)\` to reset all array actions(from choice \`$(colorElem 3)\` to \`$(colorElem 6)\`)"
        
        #
        read -p "Your choice : " choiceUP 

        if [[ $choiceUP == "exit" ]]
        then
            break
        fi
        
        if [[ $choiceUP -eq 2 ]]
        then
            # Call the function `truncateFileData`
            truncateFileData $copyActionFileOnly $cutActionFileOnly $copyActionFile $cutActionFile

            #
            read -p "Do you want to quit [y/n] : " requestQuit

            #
            if [[ $requestQuit == "y" ]]
            then
                # Stop the loop
                break
            fi
        elif [[ $choiceUP -eq 7 ]]
        then
            # Call the function `truncateFileData`
            truncateFileData $arrayIndexInitCopyCutActionFileOnly $arrayIndex1CopyCutActionFileOnly \
                $arrayIndex2CopyCutActionFileOnly $arrayIndex3CopyCutActionFileOnly \
                $arrayIndexInitCopyCutActionFile $arrayIndex1CopyCutActionFile $arrayIndex2CopyCutActionFile \
                $arrayIndex3CopyCutActionFile

            #
            read -p "Do you want to quit [y/n] : " requestQuit

            #
            if [[ $requestQuit == "y" ]]
            then
                # Stop the loop
                break
            fi
        elif [[ ` echo $choiceUP | grep -E "^[0-1]{1,1}$" ` ]]
        then
            case $choiceUP in 
                0)
                    # Call the function `truncateFileData`
                    truncateFileData $copyActionFileOnly  $copyActionFile
                    ;;
                1)
                    # Call the function `truncateFileData`
                    truncateFileData $cutActionFileOnly $cutActionFile
            esac

            #
            read -p "Do you want to quit [y/n] : " requestQuit

            #
            if [[ $requestQuit == "y" ]]
            then
                # Stop the loop
                break
            fi
        elif [[ ` echo $choiceUP | grep -E "^[3-6]{1,1}" ` ]]
        then
            case $choiceUP in
                3)
                    # Call the function `truncateFileData`
                    truncateFileData $arrayIndexInitCopyCutActionFileOnly $arrayIndexInitCopyCutActionFile
                    ;;
                4)
                    # Call the function `truncateFileData`
                    truncateFileData $arrayIndex1CopyCutActionFileOnly $arrayIndex1CopyCutActionFile
                    ;;
                5)
                    # Call the function `truncateFileData`
                    truncateFileData $arrayIndex2CopyCutActionFileOnly $arrayIndex2CopyCutActionFile
                    ;;
                6)
                    # Call the function `truncateFileData`
                    truncateFileData $arrayIndex3CopyCutActionFileOnly $arrayIndex3CopyCutActionFile
            esac

            #
            read -p "Do you want to quit [y/n] : " requestQuit

            #
            if [[ $requestQuit == "y" ]]
            then
                # Stop the loop
                break
            fi
        fi
    done
    
    #
    exit 0
fi

### End of [tag2]


### Print some files linked to the options `--doc` and `--help` . [tag3]

if [[ $1 == "--doc" ]] && [[ $# -eq 1 ]]
then
    cat /usr/lib/am-okay/documentation/am-okay-doc
    exit 0
elif [[ $1 == "--help" ]] && [[ $# -eq 1 ]]
then
    cat /usr/lib/am-okay/documentation/am-okay-help
    exit 0
elif [[ $1 == "--version" ]] && [[ $# -eq 1 ]]
then
    cat /usr/lib/am-okay/documentation/am-okay-version-pure
    exit 0
fi

### End of [tag3]
echo "~"
echo -e "Invalid request \U001F9D0 ."
exit 1
